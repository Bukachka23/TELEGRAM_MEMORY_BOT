[build-system]
build-backend = "setuptools.build_meta"
requires = ["setuptools>=61.0", "wheel>=0.37.1"]


[project]

name = "acme"
version = "0.0.1"
description = "ACME tool"
readme = "README.md"
requires-python = ">=3.9,<4.0"

license = {file = "LICENSE"}
authors = [
    {name = "Joe Example", email = "example@example.com"},
]
keywords = ["keyword", "are", "cool"]

classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Operating System :: MacOS",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: Implementation :: CPython",
]


dependencies = [

]

[project.scripts]

acme = "acme.__main__:main"

[project.urls]

"Homepage" = "<url>"
"Documentation" = "<url>"


[project.optional-dependencies]
lint = [
    "codespell>=2.2.4",
    "ruff",
    "vulture",
    "tomli",
    "validate-pyproject[all]",
    "isort",
    "black",
]

test = [
    "pytest",
    "pytest-cov",
    "tomli",
    "pytest-mock",
    "pytest-randomly",
    "deepdiff",
    "pytest-xdist[psutil]",
    "pytest-json-report",
    "xdoctest",
    "requests-mock",
    "Pygments",
]

exe = [
    "setuptools",
    "wheel",
    "build",
    "tomli",
    "pyinstaller",
    "staticx;platform_system=='Linux'",
]

dev = [
    "acme[lint,test,exe]",
    "fire",
    "mypy",
    "better_exceptions",
    "graphviz",
    "pipdeptree",
]


[tool.setuptools]

platforms = ["Linux", "Windows"]
include-package-data = true
zip-safe = true  #

[tool.setuptools.package-data]
acme = ["*.xml"]

[tool.setuptools.packages.find]
exclude = ["tests", "tests.*", "examples"]

[tool.pdm.scripts]
isort = "isort acme"
black = "black acme"
format = {composite = ["isort", "black"]}
check_isort = "isort --check acme tests"
check_black = "black --check acme tests"
vulture = "vulture --min-confidence 100 acme tests"
ruff = "ruff check acme tests"
fix = "ruff check --fix acme tests"
codespell = "codespell --toml ./pyproject.toml"
lint = {composite = ["vulture", "codespell", "ruff", "check_isort", "check_black"]}



[tool.codespell]

check-filenames = ""
ignore-words-list = "word,another,something"
skip = "htmlcov,.doctrees,*.pyc,*.class,*.ico,*.out,*.PNG,*.inv,*.png,*.jpg,*.dot"


[tool.black]
line-length = 88



[tool.isort]
profile = "black"
known_first_party = ["acme"]

extend_skip_glob  = [
    "acme/somefile.py",
    "acme/somedir/*",
]



[tool.ruff]

select = [
    "E",    # pycodestyle
    "F",    # Pyflakes
    "W",    # Warning
    "B",    # flake8-bugbear
    "A",    # flake8-builtins
    "C4",   # flake8-comprehensions
    "T10",  # flake8-debugger
    "EXE",  # flake8-executable,
    "ISC",  # flake8-implicit-str-concat
    "G",    # flake8-logging-format
    "PIE",  # flake8-pie
    "T20",  # flake8-print
    "PT",   # flake8-pytest-style
    "RSE",  # flake8-raise
    "RET",  # flake8-return
    "TID",  # flake8-tidy-imports
    "ARG",  # flake8-unused-arguments
    "PGH",  # pygrep-hooks
    "PLC",  # Pylint Convention
    "PLE",  # Pylint Errors
    "PLW",  # Pylint Warnings
    "RUF",  # Ruff-specific rules

]

line-length = 99

extend-exclude = [
    "*.pyc",
    "__pycache__",
]


ignore = [
    "F403",    # unable to detect undefined names from star imports
    "F405",    # undefined locals from star imports
    "W605",    # invalid escape sequence
    "A003",    # shadowing python builtins
    "RET505",  # unnecessary 'else' after 'return' statement
    "RET504",  # Unnecessary variable assignment before return statement
    "RET507",  # Unnecessary {branch} after continue statement
    "PT011",   # pytest-raises-too-broad
    "PT012",   # pytest.raises() block should contain a single simple statement
    "PLW0603", # Using the global statement to update is discouraged
    "PLW2901", # for loop variable overwritten by assignment target
    "G004",    # Logging statement uses f-string
    "PIE790",  # no-unnecessary-pass
    "PIE810",  # multiple-starts-ends-with
    "PGH003",  # Use specific rule codes when ignoring type issues
    "PLC1901", # compare-to-empty-string
]


[tool.ruff.per-file-ignores]
"__init__.py" = ["F401", "E501"]
"acme/somefile.py" = ["E402", "E501"]
"acme/somedir/*" = ["E501"]


[tool.mypy]
python_version = "3.9"
follow_imports = "skip"
ignore_missing_imports = true
files = "acme"

exclude = [
    "acme/somedir",
    "acme/somefile\\.py",
    "dirname",
]



[tool.pytest.ini_options]
testpaths = "tests"
norecursedirs = [
    ".vscode",
    "__pycache__"
]

filterwarnings = [
    "ignore::DeprecationWarning"
]

markers = [
    "slow: lower-importance tests that take an excessive amount of time",
]



[tool.coverage.run]

omit = [
    'acme/somedir/*',
    'acme/somefile.py',
]



[tool.vulture]

exclude = [
    "somedir",
    "*somefile.py",
]